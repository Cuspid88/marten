require "./spec_helper"
require "./reset_migrations_spec/**"

describe Marten::CLI::Manage::Command::ResetMigrations do
  with_installed_apps(
    Marten::CLI::Manage::Command::ResetMigrationsSpec::FooApp,
    Marten::CLI::Manage::Command::ResetMigrationsSpec::BarApp,
    Marten::CLI::Manage::Command::ResetMigrationsSpec::EmptyApp
  )

  before_all do
    FileUtils.rm_rf(Marten::CLI::Manage::Command::ResetMigrationsSpec::EXPECTED_MIGRATION_FILEPATH)
    Marten::DB::Management::Migrations::Recorder.new(Marten::DB::Connection.default).setup
    Marten::DB::Management::Migrations::Recorder.new(Marten::DB::Connection.get(:other)).setup
  end

  after_all do
    FileUtils.rm_rf(Marten::CLI::Manage::Command::ResetMigrationsSpec::EXPECTED_MIGRATION_FILEPATH)

    introspector = Marten::DB::Connection.default.introspector
    Marten::DB::Management::SchemaEditor.run_for(Marten::DB::Connection.default) do |schema_editor|
      schema_editor.delete_table("foo_tags") if introspector.table_names.includes?("foo_tags")
      schema_editor.delete_table("bar_tags") if introspector.table_names.includes?("bar_tags")
    end

    # Reset local migration app configs to avoid them to be used elsewhere.
    Migration::ResetMigrationsSpec::FooApp::V202108092226111.reset_app_config
    Migration::ResetMigrationsSpec::FooApp::V202108092226112.reset_app_config
    Migration::ResetMigrationsSpec::BarApp::V202108092226111.reset_app_config
    Migration::ResetMigrationsSpec::BarApp::V202108092226112.reset_app_config
  end

  describe "#run" do
    it "prints an error if no app label is not specified" do
      stdout = IO::Memory.new
      stderr = IO::Memory.new

      command = Marten::CLI::Manage::Command::ResetMigrations.new(
        options: [] of String,
        stdout: stdout,
        stderr: stderr
      )

      command.handle

      stderr.rewind.gets_to_end.includes?("You must specify an app label").should be_true
    end

    it "prints an error if the specified app label is not associated with any existing app" do
      stdout = IO::Memory.new
      stderr = IO::Memory.new

      command = Marten::CLI::Manage::Command::ResetMigrations.new(
        options: ["unknown_app"],
        stdout: stdout,
        stderr: stderr
      )

      command.handle

      stderr.rewind.gets_to_end.includes?(
        "Label 'unknown_app' is not associated with any installed apps"
      ).should be_true
    end

    it "prints the expected messages if no changes are detected because the app is empty" do
      stdout = IO::Memory.new
      stderr = IO::Memory.new

      command = Marten::CLI::Manage::Command::ResetMigrations.new(
        options: ["reset_migrations_spec_empty_app"],
        stdout: stdout,
        stderr: stderr
      )

      command.handle

      stdout.rewind.gets_to_end.strip.should eq "No changes detected"
    end

    it "generates a replacement migration for a given app" do
      stdout = IO::Memory.new
      stderr = IO::Memory.new

      command = Marten::CLI::Manage::Command::ResetMigrations.new(
        options: ["reset_migrations_spec_foo_app"],
        stdout: stdout,
        stderr: stderr
      )

      time = Marten::CLI::Manage::Command::ResetMigrationsSpec::EXPECTED_MIGRATION_TIME
      Timecop.freeze(time) do
        command.handle
      end

      File.exists?(Marten::CLI::Manage::Command::ResetMigrationsSpec::EXPECTED_MIGRATION_FILEPATH).should be_true
      generated_migration = File.read(Marten::CLI::Manage::Command::ResetMigrationsSpec::EXPECTED_MIGRATION_FILEPATH)

      generated_migration.split.map(&.strip).should eq(
        (
          <<-MIGRATION
          # Generated by Marten #{Marten::VERSION} on #{time.to_local}

          class Migration::ResetMigrationsSpecFooApp::V202202150520301 < Marten::Migration
            replaces :reset_migrations_spec_foo_app, "202108092226111_auto"
            replaces :reset_migrations_spec_foo_app, "202108092226112_auto"

            def plan
              create_table :reset_migrations_spec_foo_app_tag do
                column :id, :big_int, primary_key: true, auto: true
                column :label, :string, max_size: 255, unique: true
                column :active, :bool, default: true
              end
            end
          end

          MIGRATION
        ).split.map(&.strip)
      )
    end

    it "outputs the expected message when generating a replacement migration for a given app" do
      stdout = IO::Memory.new
      stderr = IO::Memory.new

      command = Marten::CLI::Manage::Command::ResetMigrations.new(
        options: ["reset_migrations_spec_foo_app"],
        stdout: stdout,
        stderr: stderr
      )

      time = Marten::CLI::Manage::Command::ResetMigrationsSpec::EXPECTED_MIGRATION_TIME
      Timecop.freeze(time) do
        command.handle
      end

      output = stdout.rewind.gets_to_end
      output.includes?("Generating migrations for app 'reset_migrations_spec_foo_app':").should be_true
      output.includes?("â—‹ Create reset_migrations_spec_foo_app_tag table").should be_true
    end
  end
end

module Marten::CLI::Manage::Command::ResetMigrationsSpec
  EXPECTED_MIGRATION_TIME     = Time.utc(2022, 2, 15, 10, 20, 30)
  EXPECTED_MIGRATION_FILEPATH = File.join(
    __DIR__,
    "reset_migrations_spec/foo_app/migrations/202202150520301_create_reset_migrations_spec_foo_app_tag_table.cr"
  )
end
