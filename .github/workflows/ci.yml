name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: "*"

jobs:
  qa:
    runs-on: ubuntu-latest
    container:
      image: crystallang/crystal:0.35.1
    steps:
      - uses: actions/checkout@v1
      - uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Install shards
        run: shards install --ignore-crystal-version
      - name: QA checks
        run: make qa
  specs:
    runs-on: ubuntu-latest
    container:
      image: crystallang/crystal:0.35.1
    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: marten_test
        ports:
          - 5432:5432
        # Needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: "mysql"
          MYSQL_DATABASE: marten_test
        ports:
          - 3307:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      matrix:
        db: [
          'mysql',
          'postgresql',
          'sqlite',
        ]
    steps:
    - uses: actions/checkout@v2
    - uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    - name: Install packages required for MySQL
      if: matrix.db == 'mysql'
      run: |
        apt-get update
        apt-get -yqq install mysql-client libmysqlclient-dev
    - name: Install packages required for PostgreSQL
      if: matrix.db == 'postgresql'
      run: |
        apt-get update
        apt-get -yqq install libpq-dev postgresql-client libsqlite3-dev
    - name: Install packages required for SQLite
      if: matrix.db == 'sqlite'
      run: |
        apt-get update
        apt-get -yqq install libsqlite3-dev
    - name: Create additional DB for MySQL
      if: matrix.db == 'mysql'
      run: |
        mysql -u root -h mysql --password=mysql -e 'create database marten_other_test;'
      env:
        PGPASSWORD: mysql
    - name: Create additional DB for PostgreSQL
      if: matrix.db == 'postgresql'
      run: |
        createdb marten_other_test -h postgres -U postgres
      env:
        PGPASSWORD: postgres
    - name: Install shards
      run: shards install --ignore-crystal-version
    - name: Cache Crystal
      uses: actions/cache@v1
      with:
        path: ~/.cache/crystal
        key: ${{ runner.os }}-crystal
    - name: Setup env JSON file
      run: cp .spec.env.json.ci .spec.env.json
    - name: Run tests
      run: make tests
      env:
        MARTEN_SPEC_DB_CONNECTION: ${{ matrix.db }}
